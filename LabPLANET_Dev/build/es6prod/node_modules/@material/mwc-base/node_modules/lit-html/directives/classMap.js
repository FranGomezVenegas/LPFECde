define(["exports","../lit-html.js"],function(_exports,_litHtml){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.classMap=void 0;/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */ // On IE11, classList.toggle doesn't accept a second argument.
// Since this is so minor, we just polyfill it.
if(window.navigator.userAgent.match("Trident")){DOMTokenList.prototype.toggle=function(token,force){if(force===void 0||force){this.add(token)}else{this.remove(token)}return force===void 0?!0:force}}/**
 * Stores the ClassInfo object applied to a given AttributePart.
 * Used to unset existing values when a new ClassInfo object is applied.
 */const classMapCache=new WeakMap,classMapStatics=new WeakMap,classMap=classInfo=>(0,_litHtml.directive)(part=>{if(!(part instanceof _litHtml.AttributePart)||part instanceof _litHtml.PropertyPart||"class"!==part.committer.name||1<part.committer.parts.length){throw new Error("The `classMap` directive must be used in the `class` attribute "+"and must be the only part in the attribute.")}// handle static classes
if(!classMapStatics.has(part)){part.committer.element.className=part.committer.strings.join(" ");classMapStatics.set(part,!0)}// remove old classes that no longer apply
const oldInfo=classMapCache.get(part);for(const name in oldInfo){if(!(name in classInfo)){part.committer.element.classList.remove(name)}}// add new classes
for(const name in classInfo){if(!oldInfo||oldInfo[name]!==classInfo[name]){// We explicitly want a loose truthy check here because
// it seems more convenient that '' and 0 are skipped.
part.committer.element.classList.toggle(name,!!classInfo[name])}}classMapCache.set(part,classInfo)});/**
 * Stores AttributeParts that have had static classes applied (e.g. `foo` in
 * class="foo ${classMap()}"). Static classes are applied only the first time
 * the directive is run on a part.
 */ // Note, could be a WeakSet, but prefer not requiring this polyfill.
_exports.classMap=classMap});