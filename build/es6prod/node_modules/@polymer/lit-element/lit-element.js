define(["exports","./node_modules/lit-html/lit-html.js","./node_modules/lit-html/lib/shady-render.js","./lib/updating-element.js","./lib/decorators.js"],function(_exports,_litHtml,_shadyRender,_updatingElement,_decorators){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});var _exportNames={LitElement:!0,html:!0,svg:!0};Object.defineProperty(_exports,"html",{enumerable:!0,get:function(){return _litHtml.html}});Object.defineProperty(_exports,"svg",{enumerable:!0,get:function(){return _litHtml.svg}});_exports.LitElement=void 0;Object.keys(_updatingElement).forEach(function(key){if("default"===key||"__esModule"===key)return;if(Object.prototype.hasOwnProperty.call(_exportNames,key))return;Object.defineProperty(_exports,key,{enumerable:!0,get:function(){return _updatingElement[key]}})});Object.keys(_decorators).forEach(function(key){if("default"===key||"__esModule"===key)return;if(Object.prototype.hasOwnProperty.call(_exportNames,key))return;Object.defineProperty(_exports,key,{enumerable:!0,get:function(){return _decorators[key]}})});/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */class LitElement extends _updatingElement.UpdatingElement{/**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * * @param _changedProperties Map of changed properties with old values
     */update(changedProperties){super.update(changedProperties);const templateResult=this.render();if(templateResult instanceof _litHtml.TemplateResult){this.constructor.render(templateResult,this.renderRoot,{scopeName:this.localName,eventContext:this})}}/**
     * Invoked on each update to perform rendering tasks. This method must return
     * a lit-html TemplateResult. Setting properties inside this method will *not*
     * trigger the element to update.
     * @returns {TemplateResult} Must return a lit-html TemplateResult.
     */render(){}}/**
 * Render method used to render the lit-html TemplateResult to the element's
 * DOM.
 * @param {TemplateResult} Template to render.
 * @param {Element|DocumentFragment} Node into which to render.
 * @param {String} Element name.
 */_exports.LitElement=LitElement;LitElement.render=_shadyRender.render;//# sourceMappingURL=lit-element.js.map
});