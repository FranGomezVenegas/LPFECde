import{PolymerElement,html}from"../../../../node_modules/@polymer/polymer/polymer-element.js";import{connect}from"../../../../node_modules/pwa-helpers/connect-mixin.js";import{store}from"../../../store.js";import"../../internalComponents/dialogs/esign-dialog.js";import"../../internalComponents/dialogs/confirmuser-dialog.js";import{openEsignDialog}from"../Redux/actions/esign-actions.js";import{openConfirmUserDialog}from"../Redux/actions/confirmuser-actions.js";import{AuthenticationApi}from"./authentication-api.js";import{Appapi}from"./api-app.js";import{appConfirmUserOrEsign_notCorrectMessage}from"../../../config/app-config.js";class AppElements extends Appapi(AuthenticationApi(connect(store)(PolymerElement))){stateChanged(state){this.finalToken=state.app.user.finalToken;this.currTabEsignRequired=state.tabs.currTabEsignRequired;this.currTabConfirmUserRequired=state.tabs.currTabConfirmUserRequired;this.selectedLanguage=state.app.user.appLanguage}static get properties(){return{finalToken:String,currTabConfirmUserRequired:Boolean,currTabEsignRequired:Boolean,validationNotCorrectMessage:{type:Object,value:appConfirmUserOrEsign_notCorrectMessage},selectedLanguage:{type:String}}}static get template(){return html`
            <esign-dialog></esign-dialog>
            <confirmuser-dialog></confirmuser-dialog>                        
        `}appActionTrigger(buttonName,backEndData,buttonDefinition){this.buttonName=buttonName;this.backEndData=backEndData;//console.log('app-elements >> actionTrigger >> backEndData', backEndData, 'this.backEndData', this.backEndData, 'buttonDefinition', buttonDefinition);  
//if (this.currTabEsignRequired){
if(buttonDefinition&&buttonDefinition.esign_required){store.dispatch(openEsignDialog(this.appActionTriggerNext.bind(this),this.appActionTriggerAbort.bind(this)));return}//if (this.currTabConfirmUserRequired){
if(buttonDefinition&&buttonDefinition.confirmuser_required){store.dispatch(openConfirmUserDialog(this.appActionTriggerNext.bind(this),this.appActionTriggerAbort.bind(this)));return}this.appActionTriggerNext()}appActionTriggerAbort(){var message="";switch(this.selectedLanguage){case"es":message=this.validationNotCorrectMessage.message_es;break;//message=response.data.message_es; break;            
default:message=this.validationNotCorrectMessage.message_en;break;//message=response.data.message_en; break;
}this.dispatchEvent(new CustomEvent("toast-error",{bubbles:!0,composed:!0,detail:message}));this.loading=!1}appActionTriggerNext(){var buttonName=this.buttonName,backEndData=this.backEndData,datas=[];datas.finalToken=this.finalToken;var actionName=buttonName.toUpperCase();console.log("app-elements >> appActionTriggerNext >> backEndData",backEndData,"this.backEndData",this.backEndData,"buttonName",buttonName);switch(buttonName.toUpperCase()){case"USER_CHANGE_PSWD":datas.newPassword=backEndData.newPassword;this.appActionTriggerAPI(null,this.finalToken,actionName,datas,datas.tabInfo,this.callBackFunctionEnvMonitElem);break;case"USER_CHANGE_ESIGN":datas.newEsign=backEndData.newEsign;this.appActionTriggerAPI(null,this.finalToken,actionName,datas,datas.tabInfo,this.callBackFunctionEnvMonitElem);break;case"SET_DEFAULT_TABS_ON_LOGIN":datas.tabsString=backEndData.tabsString;this.appActionTriggerAPI(null,this.finalToken,actionName,datas,datas.tabInfo,this.callBackFunctionEnvMonitElem);break;default:console.log("Action "+buttonName+" is not declared in env-monit-elements.sample.js >> appActionTriggerNext");break;}return}}customElements.define("app-elements",AppElements);